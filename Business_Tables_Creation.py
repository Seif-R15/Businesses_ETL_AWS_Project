{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPdsg2OnY3ah0aBTFGdEQw4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Seif-R15/Businesses_ETL_AWS_Project/blob/main/Business_Tables_Creation.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dZHf2ztqyPmg"
      },
      "outputs": [],
      "source": [
        "import json\n",
        "import boto3\n",
        "import csv\n",
        "import io\n",
        "import psycopg2\n",
        "\n",
        "s3 = boto3.client('s3')\n",
        "\n",
        "def lambda_handler(event, context):\n",
        "    # Generate timestamps\n",
        "    start_time = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')  # For Redshift-compatible timestamp\n",
        "    csv_timestamp = datetime.utcnow().strftime('%Y-%m-%dT%H-%M-%S')  # For unique CSV filenames\n",
        "\n",
        "    try:\n",
        "        # Extract bucket name and object key from the event\n",
        "        bucket_name = event['Records'][0]['s3']['bucket']['name']\n",
        "        object_key = event['Records'][0]['s3']['object']['key']\n",
        "\n",
        "        # Get the file from S3\n",
        "        response = s3.get_object(Bucket=bucket_name, Key=object_key)\n",
        "        file_content = response['Body'].read().decode('utf-8')\n",
        "\n",
        "        conn = psycopg2.connect(\n",
        "            dbname='actual_products',\n",
        "            user='aws_user_name',\n",
        "            password='Redshift_Password',\n",
        "            host='redshift-cluster-1.ckgij7mqpm55.eu-north-1.redshift.amazonaws.com',\n",
        "            port='5439'\n",
        "        )\n",
        "        cursor = conn.cursor()\n",
        "\n",
        "         # Drop and recreate staging table\n",
        "        cursor.execute(\"DROP TABLE IF EXISTS staging;\")\n",
        "        cursor.execute(\"\"\"\n",
        "        CREATE TABLE staging (\n",
        "            ProductID INT,\n",
        "            ProductName VARCHAR(255),\n",
        "            SupplierID INT,\n",
        "            CategoryID INT,\n",
        "            Unit VARCHAR(50),\n",
        "            Price DECIMAL(10, 2)\n",
        "        );\n",
        "        \"\"\")\n",
        "\n",
        "         # Read CSV content\n",
        "        csv_reader = csv.reader(io.StringIO(file_content))\n",
        "        next(csv_reader)  # Skip header row\n",
        "\n",
        "        # Insert rows into staging table\n",
        "        insert_query = \"\"\"\n",
        "        INSERT INTO staging (ProductID, ProductName, SupplierID, CategoryID, Unit, Price)\n",
        "        VALUES (%s, %s, %s, %s, %s, %s)\n",
        "        \"\"\"\n",
        "        for row in csv_reader:\n",
        "            cursor.execute(insert_query, row)\n",
        "\n",
        "        conn.commit()\n",
        "\n",
        "        # Identify newly inserted rows (fetch all relevant columns) and store the results\n",
        "        cursor.execute(\"\"\"\n",
        "        SELECT ProductID, ProductName, SupplierID, CategoryID, Unit, Price\n",
        "        FROM staging\n",
        "        WHERE ProductID NOT IN (SELECT ProductID FROM product);\n",
        "        \"\"\")\n",
        "        new_products = cursor.fetchall()  # Store new products for CSV generation\n",
        "\n",
        "        # Insert new rows into the product table\n",
        "        cursor.execute(\"\"\"\n",
        "        INSERT INTO product (ProductID, ProductName, SupplierID, CategoryID, Unit, Price)\n",
        "        SELECT ProductID, ProductName, SupplierID, CategoryID, Unit, Price\n",
        "        FROM staging\n",
        "        WHERE ProductID NOT IN (SELECT ProductID FROM product);\n",
        "        \"\"\")\n",
        "\n",
        "        conn.commit()\n",
        "\n",
        "        cursor.execute(\"\"\"\n",
        "        CREATE TABLE IF NOT EXISTS audit (\n",
        "          Aud_id INT IDENTITY(1,1) PRIMARY KEY,  -- Auto-incremented ID for each Lambda execution\n",
        "          update_count INT,                      -- Number of rows updated\n",
        "          insert_count INT,                      -- Number of rows inserted\n",
        "          ProductID INT,                         -- ProductID being inserted/updated\n",
        "          start_date TIMESTAMP,                  -- Time when Lambda started\n",
        "          end_date TIMESTAMP                     -- Time when Lambda finished\n",
        "        );\n",
        "        \"\"\")\n",
        "        conn.commit()\n",
        "\n",
        "        cursor.execute(\"\"\"\n",
        "        CREATE TABLE product (\n",
        "          ProductID INTEGER NOT NULL,\n",
        "          ProductName VARCHAR(255),\n",
        "          SupplierID INTEGER,\n",
        "          CategoryID INTEGER,\n",
        "          Unit VARCHAR(255),\n",
        "          Price DOUBLE PRECISION\n",
        "        );\n",
        "        \"\"\")\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}